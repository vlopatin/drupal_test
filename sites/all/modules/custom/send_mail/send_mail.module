<?php

// Implements hook_menu()

function send_mail_menu() {
  $items = array();
  $items['send_mail/form'] = array(
    'title' => 'Send mail page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('send_mail_form'),
    'access arguments' => array('post comments'),
  );
  $items['send_mail/admin'] = array(
    'title' => 'Send mail admin page',
    'page callback' => 'send_mail_admin',
    'page arguments' => array(''),
    'access arguments' => array('access administration menu'),
  );
  return $items;
}

function send_mail_admin() {

  $header = array(t('ID'), t('Email'), t('Subject'), t('From user'), t('Date'));
  $rows = array();

  $query = db_select('send_mail_table', 's')
    ->fields('s')
    //->limit('3')
    ->execute();

  while ($value = $query->fetchAssoc()) {
    $user = user_load($value['uid']);
    $username = $user->name;
    $rows[] = array(
      $value['id'],
      $value['email'],
      $value['subject'],
      $username,
      format_date($value['sended_at'], 'long')
    );
  }

  return theme('send_mail_table', array('header' => $header, 'rows' => $rows, 'caption' => 'Send mail log'));

}

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111
function _theme_send_mail_table($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];
//  $attributes = $variables['attributes'];
  $caption = $variables['caption'];
//  $colgroups = $variables['colgroups'];
  // $sticky = $variables['sticky'];
  // $empty = $variables['empty'];

  // Add sticky headers, if applicable.
//  if (count($header) && $sticky) {
//    drupal_add_js('misc/tableheader.js');
//    // Add 'sticky-enabled' class to the table to identify it for JS.
//    // This is needed to target tables constructed by this function.
//    $attributes['class'][] = 'sticky-enabled';
//  }

//  $output = '<table' . drupal_attributes($attributes) . ">\n";
  $output = '<table' . ">\n";

  if (isset($caption)) {
    $output .= '<caption>' . $caption . "</caption>\n";
  }

  // Add the 'empty' row message if available.
  if (!count($rows)) {
    $header_count = 0;
    foreach ($header as $header_cell) {
      if (is_array($header_cell)) {
        $header_count += isset($header_cell['colspan']) ? $header_cell['colspan'] : 1;
      } else {
        $header_count++;
      }
    }
    $rows[] = array(array('data' => '', 'colspan' => $header_count, 'class' => array('empty', 'message')));
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    // HTML requires that the thead tag has tr tags in it followed by tbody
    // tags. Using ternary operator to check and see if we have any rows.
    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');
    foreach ($header as $cell) {
      $cell = tablesort_header($cell, $header, $ts);
      $output .= _theme_table_cell($cell, TRUE);
    }
    // Using ternary operator to close the tags based on whether or not there are rows
    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");
  } else {
    $ts = array();
  }

  // Format the table rows:
  if (count($rows)) {
    $output .= "<tbody>\n";
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class = 'even';
    foreach ($rows as $number => $row) {
      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        $cells = $row['data'];
        $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

        // Set the attributes array and exclude 'data' and 'no_striping'.
        $attributes = $row;
        unset($attributes['data']);
        unset($attributes['no_striping']);
      } else {
        $cells = $row;
        $attributes = array();
        $no_striping = FALSE;
      }
      if (count($cells)) {
        // Add odd/even class
        if (!$no_striping) {
          $class = $flip[$class];
          $attributes['class'][] = $class;
        }

        // Build row
        $output .= ' <tr' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cells as $cell) {
          $cell = table_sort_cell($cell, $header, $ts, $i++);
          $output .= _theme_mytable_cell($cell);
        }
        $output .= " </tr>\n";
      }
    }
    $output .= "</tbody>\n";
  }

  $output .= "</table>\n";
  return $output;
}

function table_sort_cell($cell, $header, $ts, $i) {
  if (isset($header[$i]['data']) && $header[$i]['data'] == $ts['name'] && !empty($header[$i]['field'])) {
    if (is_array($cell)) {
      $cell['class'][] = 'active';
    } else {
      $cell = array('data' => $cell, 'class' => array('active'));
    }
  }
  return $cell;
}

function _theme_mytable_cell($cell, $header = FALSE) {
  $attributes = '';

  if (is_array($cell)) {
    $data = isset($cell['data']) ? $cell['data'] : '';
    // Cell's data property can be a string or a renderable array.
    if (is_array($data)) {
      $data = drupal_render($data);
    }
    $header |= isset($cell['header']);
    unset($cell['data']);
    unset($cell['header']);
    //  $attributes = drupal_attributes($cell);
  } else {
    $data = $cell;
  }

  if ($header) {
    $output = "<th>$data</th>";
  } else {
    $output = "<td>$data</td>";
  }

  return $output;
}


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111

function send_mail_theme() {
  return array(
    'send_mail_table' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'caption' => NULL,
      ),
      'template' => 'send_mail_table',

      ),
  );
}

function template_preprocess_send_mail_table(&$variables, $hook) {


  $variables['header'][0] = 'QWQ';


}


function send_mail_form() {

  $form = array();

  $form['to'] = array(
    '#type' => 'fieldset',
    '#title' => 'To',
  );

  $form['to']['greeting'] = array(
    '#type' => 'select',
    '#options' => array('Sir', 'Mr.', 'Madam', 'Ms.'),
    '#required' => TRUE,
  );

  $form['to']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 20,
    '#required' => TRUE,
  );

  $form['to']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 20,
    '#required' => TRUE,
  );

  $form['message'] = array(
    '#type' => 'fieldset',
    '#title' => 'Message',
  );

  $form['message']['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#size' => 20,
    '#required' => TRUE,
  );


  $form['message']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#size' => 200,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send message'),
  );
  return $form;
}

// Validate function for send_mail_form
function send_mail_form_validate($form, &$form_state) {

  $mail = $form_state['values']['email'];
  if (!valid_email_address($mail)) {

    form_set_error('email', t('The email address appears to be invalid.'));
  }
}

function send_mail_form_submit($form, &$form_state) {

  global $user;
  $uid = $user->uid;
  $user_name = $user->name;
  $values = $form_state['values'];
  $values['greeting'] = $form['to']['greeting']['#options'][$form_state['values']['greeting']];
  // $values['body'] = $values['body']['value'];

  $to = $values['email'];


  $params = array(
    'subject' => $values['subject'],
    'body' => $values['body'],
    'greeting' => $values['greeting'],
    'name' => $values['name'],
    'username' => $user_name,
    'sended_at' => REQUEST_TIME,
  );


//  drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
  if (drupal_mail('send_mail', 'page_mail', $to, language_default(), $params)) {

    $query = db_insert('send_mail_table')
      ->fields(array('id', 'greeting', 'name', 'email', 'subject', 'body', 'uid', 'sended_at'))
      ->values(array(
        'id' => NULL,
        'greeting' => $values['greeting'],
        'name' => $values['name'],
        'email' => $values['email'],
        'subject' => $values['subject'],
        'body' => $values['body'],
        'uid' => $uid,
        'sended_at' => REQUEST_TIME
      ))
      ->execute();
    if ($query > 0) {
      drupal_set_message(t('Success: the message was sent and record to the base.'), 'status');
    } else {
      drupal_set_message(t('Success: the message was sent, but was not record to the base.'), 'status');
    }

  } else drupal_set_message(t('Fail: the message was not sent.'), 'status');

}

function send_mail_mail($key, &$message, $params) {

  $language = $message['language'];

  $variables = array(
    '!site-name' => variable_get('site_name', 'Drupal'),
    '!subject' => $params['subject'],
    '!greeting' => 'Hello, ' . $params['greeting'] . ' ' . $params['name'] . '! ',
    '!body' => $params['body'],
    'sended_at' => format_date($params['sended_at'], 'long'),
  );
  switch ($key) {
    case 'page_mail':
      $message['subject'] .= t($variables['!subject'], array('langcode' => $language->language));
      $message['body'][] .= t($variables['!greeting'], array('langcode' => $language->language));
      $message['body'][] .= t($variables['!body'], array('langcode' => $language->language));
      $message['body'][] .= t('This message was sent from ' . $variables['!site-name'], array('langcode' => $language->language));
      $message['body'][] .= t('By user ' . $params['username'], array('langcode' => $language->language));
      $message['body'][] .= t('At ' . $variables['sended_at'] . '.', array('langcode' => $language->language));
      break;
  }
}
